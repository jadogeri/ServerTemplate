Here is an example of using Testcontainers for Node.js with MongoDB: 
const { MongoDBContainer } = require("@testcontainers/mongodb");
const mongoose = require("mongoose");

describe("MongoDB Integration Test", () => {
  let mongoDBContainer;
  let connection;

  beforeAll(async () => {
    // Start the MongoDB Testcontainer
    mongoDBContainer = await new MongoDBContainer("mongo:6.0.1").start();

    // Get the connection string from the container
    const connectionString = mongoDBContainer.getConnectionString();

    // Connect Mongoose to the Testcontainer's MongoDB instance
    connection = await mongoose.createConnection(connectionString, {
      directConnection: true, // Important for single-node replica sets
    });
  }, 60000); // Set a higher timeout for container startup

  afterAll(async () => {
    // Close the Mongoose connection
    await connection.close();
    // Stop and clean up the MongoDB Testcontainer
    await mongoDBContainer.stop();
  });

  it("should connect to MongoDB and insert a document", async () => {
    // Define a Mongoose schema and model
    const UserSchema = new mongoose.Schema({
      name: String,
      email: String,
    });
    const User = connection.model("User", UserSchema);

    // Create and save a new document
    const newUser = new User({ name: "John Doe", email: "john.doe@example.com" });
    await newUser.save();

    // Find the saved document
    const foundUser = await User.findOne({ name: "John Doe" });

    // Assertions
    expect(foundUser).toBeDefined();
    expect(foundUser.email).toBe("john.doe@example.com");
  });

  it("should be able to query multiple documents", async () => {
    const User = connection.model("User"); // Reuse the model

    // Insert multiple documents
    await User.create([
      { name: "Jane Doe", email: "jane.doe@example.com" },
      { name: "Peter Jones", email: "peter.jones@example.com" },
    ]);

    // Query all users
    const users = await User.find({});

    // Assertions
    expect(users.length).toBe(3); // Including the one from the previous test
  });
});

AI responses may include mistakes.

